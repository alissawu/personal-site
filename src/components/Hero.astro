---
// src/components/Hero.astro
---

<section id="home" class="hero">
    <div class="hero-content">
      <div class="glitch-wrapper">
        <h1 class="hero-title" data-value="ALISSA_WU">
          <span class="decode-text">ALISSA_WU</span>
        </h1>
        <div class="cyber-subtitle">
          <span class="typing">SOFTWARE_ENGINEER</span>
          <span class="blink">|</span>
        </div>
      </div>
      
      <div class="ascii-art">
        <pre class="cyber-girl">
      ╱|、
     (˚ˎ 。7  
      |、˜〵          
     じしˍ,)ノ
        </pre>
      </div>
      
      
      <div class="bio-text">
        <p class="glitch-text">
          CS_MATH @ DUKE // VISA_SWE // INTEROS_DATA_SCIENCE // QUANT_COMPETITOR
        </p>
        <p class="typing-text">
          Building intelligent systems at the intersection of 
          <span class="highlight-pink">artificial intelligence</span> and 
          <span class="highlight-blue">meaningful software</span>
        </p>
      </div>
      
      <div class="cta-buttons">
        <button class="cyber-btn primary" onclick="document.getElementById('projects').scrollIntoView({ behavior: 'smooth' })">
          <span class="btn-text">VIEW_PROJECTS</span>
          <span class="btn-glitch">VIEW_PROJECTS</span>
        </button>
        <button class="cyber-btn secondary" onclick="document.getElementById('experience').scrollIntoView({ behavior: 'smooth' })">
          <span class="btn-text">WORK_EXPERIENCE</span>
          <span class="btn-glitch">WORK_EXPERIENCE</span>
        </button>
        <button class="cyber-btn secondary" onclick="window.open('/resume.pdf', '_blank')">
          <span class="btn-text">DOWNLOAD_RESUME</span>
          <span class="btn-glitch">DOWNLOAD_RESUME</span>
        </button>
        <button class="cyber-btn secondary">
          <span class="btn-text">INITIALIZE_CHAT</span>
          <span class="btn-glitch">INITIALIZE_CHAT</span>
        </button>
      </div>
    </div>
    
    <div class="floating-elements">
      <div class="floating-code">
        <pre>
          Embedding(vocab_size, embedding_dim, input_length=max_length),
          GlobalAveragePooling1D(),
          Dropout(0.2),
          Dense(hidden_units, activation='relu'),
          Dense(1, activation='sigmoid')
        </pre>
      </div>
    </div>
    <script>
      // All possible chara to show during scramble effect
      const letters="ACDEIJKNOPQRSTUVWXYZ0123456789_[]()*#-~<>/:="
      // Wait for page to load
      window.addEventListener('load', () => {
        // Find element, tell ts it's an HTMLElement
        const element = document.querySelector(".decode-text") as HTMLElement;
        // check if element exists
        if (!element) {
          console.error("Could not find decode-text element");
          return; // exit if element not found
        }
        // Check if parent exists
        if (!element.parentElement){
          console.error("Element has no parent");
          return;
        }
        // fallback which it's always gonna be
        const finalText = element.parentElement.dataset.value || "ALISSA_WU";
        // Start w scrambled text
        element.innerText = finalText
          .split("")
          .map(() => letters[Math.floor(Math.random() * letters.length)])
          .join("");
        // Track how many letters decoded
        let iteration = 0;

        // Decode animation
        const interval = setInterval(() => {
          element.innerText = finalText
            .split("")
            .map((_, index: number) => {
              // If we've decoded up to this position, show the real letter
              if(index < iteration) {
                return finalText[index];
              }
              // Otherwise, show random character
              return letters[Math.floor(Math.random() * letters.length)];
            })
            .join("");
          // Stop when fully decoded
          if(iteration >= finalText.length) {
            clearInterval(interval);
          }
          // Control decode speed (higher denominator = slower)
          iteration += 1 / 3; // add 1/3 each 30ms, so each 90ms 1 char is revealed
        }, 30); // Run every 30ms
      });
    </script>
  </section>
  
  <style>
    .hero {
      position: relative;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10;
    }
    
    .hero-content {
      text-align: center;
      max-width: 1200px;
      padding: 2rem;
    }
    
    .glitch-wrapper {
      margin-bottom: 3rem;
    }
    
    .hero-title {
      font-family: 'Orbitron', sans-serif;
      font-size: clamp(2rem, 7vw, 5rem); /* Size of title */
      font-weight: 900;
      letter-spacing: 0.1em;
      color: #cecece;
      text-shadow: 
        0 0 10px var(--cyber-blue),
        0 0 20px var(--cyber-blue),
        0 0 30px var(--cyber-blue);
      position: relative;
      margin: 0;
    }
    

    
    .cyber-subtitle {
      font-size: 1.5rem;
      color: var(--cyber-blue);
      margin-top: 1rem;
    }
    
    .blink {
      animation: blink 1s infinite;
    }
    
    @keyframes blink {
      0%, 50% { opacity: 1; }
      51%, 100% { opacity: 0; }
    }
    
    .ascii-art {
      margin: 2rem 0;
      color: var(--cyber-pink);
      font-size: 1.2rem;
      text-shadow: 0 0 10px var(--cyber-pink);
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 2rem;
      margin: 3rem 0;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }
    
    .stat-box {
      background: rgba(0, 212, 255, 0.1);
      border: 1px solid var(--cyber-blue);
      padding: 1.5rem;
      position: relative;
      overflow: hidden;
    }
    
    .stat-box::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, var(--cyber-blue), var(--cyber-pink), var(--cyber-green));
      z-index: -1;
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .stat-box:hover::before {
      opacity: 1;
    }
    
    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--cyber-green);
      font-family: 'Orbitron', sans-serif;
    }
    
    .stat-label {
      font-size: 0.8rem;
      color: var(--cyber-blue);
      margin-top: 0.5rem;
    }
    
    .bio-text {
      margin: 2rem 0;
      font-size: 1.1rem;
    }
    
    .highlight-pink {
      color: var(--cyber-pink);
      text-shadow: 0 0 5px var(--cyber-pink);
    }
    
    .highlight-blue {
      color: var(--cyber-blue);
      text-shadow: 0 0 5px var(--cyber-blue);
    }
    
    .cta-buttons {
      display: flex;
      gap: 3rem;
      justify-content: center;
      margin-top: 2rem;
    }
    
    .cyber-btn {
      position: relative;
      padding: 1rem 2rem;
      border: 2px solid;
      background: transparent;
      color: inherit;
      font-family: inherit;
      font-size: 1rem;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      cursor: pointer;
      overflow: hidden;
      transition: all 0.3s;
    }
    
    .cyber-btn.primary {
      border-color: var(--cyber-pink);
      color: var(--cyber-pink);
    }
    
    .cyber-btn.secondary {
      border-color: var(--cyber-blue);
      color: var(--cyber-blue);
    }
    
    .cyber-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 0 20px currentColor;
    }
    
    .btn-glitch {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transform: translate(0);
    }
    
    .cyber-btn:hover .btn-glitch {
      animation: btn-glitch 0.3s infinite;
      opacity: 1;
    }
    
    @keyframes btn-glitch {
      0% { transform: translate(0); }
      33% { transform: translate(-2px, -2px); }
      66% { transform: translate(2px, 2px); }
      100% { transform: translate(0); }
    }
    
    .floating-code {
      position: absolute;
      top: 20%;
      right: 10%;
      opacity: 0.3;
      color: var(--cyber-green);
      font-size: 0.8rem;
      animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-20px); }
    }
  </style>