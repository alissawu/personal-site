---
// src/components/ChatPanel.astro
---

<div id="chat-panel" class="chat-panel">
  <div class="resize-handle"></div>
  <div class="chat-header">
    <div class="chat-title">
      <span class="title-prefix">&gt;</span> PORTFOLIO_ASSISTANT
      <span class="status-indicator"></span>
    </div>
    <div class="chat-controls">
      <button class="minimize-btn" aria-label="Minimize">_</button>
      <button class="close-btn" aria-label="Close">Ã—</button>
    </div>
  </div>
  
  <div class="chat-messages" id="chat-messages">
    <div class="welcome-message">
      <div class="message assistant">
        <span class="message-prefix">[ASSISTANT]</span>
        <p>Hey! I'm here to help you learn about Alissa's experience and projects. What would you like to know?</p>
      </div>
      <div class="example-prompts">
        <button class="prompt-chip">What's her experience with Python?</button>
        <button class="prompt-chip">Tell me about her ML projects</button>
        <button class="prompt-chip">What internships has she done?</button>
      </div>
    </div>
  </div>
  
  <div class="chat-input-container">
    <div class="input-wrapper">
      <span class="input-prefix">$</span>
      <textarea 
        id="chat-input" 
        class="chat-input" 
        placeholder="Ask about experience, projects, skills..."
        maxlength="500"
        rows="1"
      ></textarea>
      <button id="send-btn" class="send-btn">SEND</button>
    </div>
    <div class="input-info">
      <span class="char-count">0/500</span>
    </div>
  </div>
</div>

<style>
  .chat-panel {
    position: fixed;
    right: 0;
    top: 0;
    height: 100vh;
    width: 450px;
    max-width: 100vw;
    background: rgba(0, 0, 0, 0.95);
    border-left: 2px solid var(--cyber-green);
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1000;
    display: flex;
    flex-direction: column;
    box-shadow: -5px 0 20px rgba(0, 255, 255, 0.1);
  }

  .chat-panel.active {
    transform: translateX(0);
  }
  
  .resize-handle {
    position: absolute;
    left: 0;
    top: 0;
    width: 5px;
    height: 100%;
    cursor: ew-resize;
    background: transparent;
    transition: background 0.2s;
  }
  
  .resize-handle:hover {
    background: var(--cyber-green);
    opacity: 0.5;
  }
  
  .chat-panel.resizing {
    transition: none;
  }

  .chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #333;
    background: rgba(0, 0, 0, 0.8);
  }

  .chat-title {
    font-family: 'Orbitron', sans-serif;
    font-size: 1rem;
    color: var(--cyber-green);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .title-prefix {
    opacity: 0.5;
  }

  .status-indicator {
    width: 8px;
    height: 8px;
    background: var(--cyber-green);
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.3; }
  }

  .chat-controls {
    display: flex;
    gap: 0.5rem;
  }

  .minimize-btn,
  .close-btn {
    background: none;
    border: 1px solid #444;
    color: #999;
    width: 30px;
    height: 30px;
    cursor: pointer;
    font-family: monospace;
    transition: all 0.2s;
  }

  .minimize-btn:hover,
  .close-btn:hover {
    color: var(--cyber-green);
    border-color: var(--cyber-green);
  }

  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
    scrollbar-width: thin;
    scrollbar-color: var(--cyber-green) transparent;
  }

  .chat-messages::-webkit-scrollbar {
    width: 6px;
  }

  .chat-messages::-webkit-scrollbar-track {
    background: transparent;
  }

  .chat-messages::-webkit-scrollbar-thumb {
    background: var(--cyber-green);
    opacity: 0.3;
  }

  .message {
    margin-bottom: 1.5rem;
    animation: messageSlide 0.3s ease-out;
  }

  @keyframes messageSlide {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .message-prefix {
    font-size: 0.75rem;
    color: var(--cyber-green);
    font-family: 'Orbitron', sans-serif;
    display: block;
    margin-bottom: 0.5rem;
  }

  .message.user .message-prefix {
    color: var(--cyber-blue);
  }

  .message p {
    color: #e0e0e0;
    line-height: 1.6;
    margin: 0;
  }

  .example-prompts {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .prompt-chip {
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid var(--cyber-blue);
    color: var(--cyber-blue);
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s;
    font-family: inherit;
  }

  .prompt-chip:hover {
    background: rgba(0, 212, 255, 0.2);
    transform: scale(1.05);
  }

  .chat-input-container {
    border-top: 1px solid #333;
    padding: 1rem 1.5rem;
    background: rgba(0, 0, 0, 0.8);
  }

  .input-wrapper {
    display: flex;
    align-items: center;
    background: #111;
    border: 1px solid #333;
    padding: 0.75rem;
    gap: 0.5rem;
  }

  .input-prefix {
    color: var(--cyber-green);
    font-family: monospace;
  }

  .chat-input {
    flex: 1;
    background: none;
    border: none;
    color: #e0e0e0;
    font-family: monospace;
    font-size: 0.875rem;
    outline: none;
    resize: none;
    min-height: 1.2em;
    max-height: 100px;
    overflow-y: auto;
    padding: 0;
    line-height: 1.4;
  }

  .chat-input::placeholder {
    color: #666;
  }

  .send-btn {
    background: none;
    border: 1px solid var(--cyber-green);
    color: var(--cyber-green);
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
    letter-spacing: 0.1em;
    cursor: pointer;
    transition: all 0.2s;
    font-family: 'Orbitron', sans-serif;
  }

  .send-btn:hover {
    background: var(--cyber-green);
    color: #000;
  }

  .input-info {
    display: flex;
    justify-content: flex-end;
    margin-top: 0.5rem;
  }

  .char-count {
    font-size: 0.75rem;
    color: #666;
    font-family: monospace;
  }

  .typing-indicator {
    display: flex;
    gap: 0.3rem;
    padding: 0.5rem 0;
  }

  .typing-dot {
    width: 6px;
    height: 6px;
    background: var(--cyber-green);
    border-radius: 50%;
    animation: typing 1.4s infinite;
  }

  .typing-dot:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0%, 60%, 100% {
      opacity: 0.3;
    }
    30% {
      opacity: 1;
    }
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    .chat-panel {
      width: 100%;
    }

    .example-prompts {
      flex-direction: column;
    }

    .prompt-chip {
      width: 100%;
      text-align: left;
    }
  }

  /* Code block styling for responses */
  .message pre {
    background: #1a1a1a;
    border: 1px solid #333;
    padding: 1rem;
    margin: 0.5rem 0;
    overflow-x: auto;
    font-size: 0.875rem;
  }

  .message code {
    color: var(--cyber-green);
    background: rgba(0, 212, 255, 0.1);
    padding: 0.2rem 0.4rem;
    font-size: 0.875rem;
  }
</style>

<script>
  import { chatSystemPrompt, resumeContext } from '../data/resumeContext';

  // Chat state
  let messages: Array<{role: string, content: string}> = [];
  let isTyping = false;

  // DOM elements
  const panel = document.getElementById('chat-panel');
  const messagesContainer = document.getElementById('chat-messages');
  const input = document.getElementById('chat-input') as HTMLTextAreaElement;
  const sendBtn = document.getElementById('send-btn');
  const charCount = document.querySelector('.char-count');
  const closeBtn = document.querySelector('.close-btn');
  const minimizeBtn = document.querySelector('.minimize-btn');
  const promptChips = document.querySelectorAll('.prompt-chip');

  // Initialize chat button - find button with INITIALIZE_CHAT text
  const buttons = document.querySelectorAll('.cyber-btn');
  buttons.forEach(button => {
    const btnText = button.querySelector('.btn-text');
    if (btnText && btnText.textContent === 'INITIALIZE_CHAT') {
      button.addEventListener('click', openChat);
    }
  });
  
  // Function to open chat
  function openChat() {
    panel?.classList.add('active');
    const panelWidth = panel?.offsetWidth || 450;
    document.body.style.marginRight = panelWidth + 'px';
    input?.focus();
  }
  
  // Listen for custom event from floating button
  window.addEventListener('open-chat', openChat);

  // Close button
  closeBtn?.addEventListener('click', closeChat);
  minimizeBtn?.addEventListener('click', closeChat);
  
  function closeChat() {
    panel?.classList.remove('active');
    document.body.style.marginRight = '0';
  }

  // Character count and auto-resize
  input?.addEventListener('input', () => {
    if (charCount) {
      charCount.textContent = `${input.value.length}/500`;
    }
    
    // Auto-resize textarea
    input.style.height = 'auto';
    const newHeight = Math.min(input.scrollHeight, 100);
    input.style.height = newHeight + 'px';
  });

  // Example prompts
  promptChips.forEach(chip => {
    chip.addEventListener('click', () => {
      const text = chip.textContent;
      if (text && input) {
        input.value = text;
        sendMessage();
      }
    });
  });

  // Send message
  async function sendMessage() {
    const message = input?.value.trim();
    if (!message || isTyping) return;

    // Add user message
    addMessage('user', message);
    if (input) {
      input.value = '';
      input.style.height = 'auto';
    }
    if (charCount) charCount.textContent = '0/500';

    // Show typing indicator
    showTypingIndicator();
    isTyping = true;

    try {
      // Call the actual API
      const response = await callAPI(message);
      
      removeTypingIndicator();
      addMessage('assistant', response);
    } catch (error) {
      removeTypingIndicator();
      addMessage('assistant', 'Sorry, I encountered an error. Please try again.');
    } finally {
      isTyping = false;
    }
  }

  // Add message to chat
  function addMessage(role: string, content: string) {
    messages.push({ role, content });
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}`;
    
    const prefix = document.createElement('span');
    prefix.className = 'message-prefix';
    prefix.textContent = role === 'user' ? '[YOU]' : '[ASSISTANT]';
    
    const text = document.createElement('p');
    text.innerHTML = content; // Using innerHTML to support potential formatting
    
    messageDiv.appendChild(prefix);
    messageDiv.appendChild(text);
    
    // Remove welcome message if it exists
    const welcome = messagesContainer?.querySelector('.welcome-message');
    if (welcome) welcome.remove();
    
    messagesContainer?.appendChild(messageDiv);
    messagesContainer?.scrollTo(0, messagesContainer.scrollHeight);
  }

  // Typing indicator
  function showTypingIndicator() {
    const indicator = document.createElement('div');
    indicator.className = 'typing-indicator';
    indicator.id = 'typing-indicator';
    
    for (let i = 0; i < 3; i++) {
      const dot = document.createElement('span');
      dot.className = 'typing-dot';
      indicator.appendChild(dot);
    }
    
    messagesContainer?.appendChild(indicator);
    messagesContainer?.scrollTo(0, messagesContainer.scrollHeight);
  }

  function removeTypingIndicator() {
    document.getElementById('typing-indicator')?.remove();
  }

  // Call actual API
  async function callAPI(message: string): Promise<string> {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ message }),
    });

    if (!response.ok) {
      throw new Error(`API call failed: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.error) {
      return data.fallback || "I'm having trouble connecting right now. Please try again!";
    }
    
    return data.response;
  }

  // Event listeners
  sendBtn?.addEventListener('click', sendMessage);
  input?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });
  
  // Resize functionality
  let isResizing = false;
  let startX = 0;
  let startWidth = 0;
  
  const resizeHandle = document.querySelector('.resize-handle') as HTMLElement;
  
  resizeHandle?.addEventListener('mousedown', (e) => {
    isResizing = true;
    startX = e.clientX;
    startWidth = panel?.offsetWidth || 450;
    panel?.classList.add('resizing');
    document.body.style.cursor = 'ew-resize';
    e.preventDefault();
  });
  
  document.addEventListener('mousemove', (e) => {
    if (!isResizing || !panel) return;
    
    const diff = startX - e.clientX;
    const newWidth = Math.min(Math.max(startWidth + diff, 350), 800);
    panel.style.width = newWidth + 'px';
    
    if (panel.classList.contains('active')) {
      document.body.style.marginRight = newWidth + 'px';
    }
  });
  
  document.addEventListener('mouseup', () => {
    if (isResizing) {
      isResizing = false;
      panel?.classList.remove('resizing');
      document.body.style.cursor = '';
    }
  });

  // ESC to close
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && panel?.classList.contains('active')) {
      panel.classList.remove('active');
      document.body.style.marginRight = '0';
    }
  });
</script>